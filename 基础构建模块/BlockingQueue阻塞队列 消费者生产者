package com.threads;

import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingDeque;

public class Test7 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		final BlockingQueue<Integer> queue = new LinkedBlockingDeque<Integer>(5);

		ExecutorService exec = Executors.newFixedThreadPool(6);

		exec.execute(new Runnable() {

			Random rand = new Random();

			public void run() {
				// TODO Auto-generated method stub

				while (true) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					int value = rand.nextInt(1000);

					System.out.println("put " + value + " into queue...");

					try {
						queue.put(value);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					System.out.println("put " + value + " over...");
				}

			}

		});

		for (int i = 0; i < 5; i++) {
			exec.execute(new Runnable() {

				public void run() {
					// TODO Auto-generated method stub

					while (true) {

						try {
							Thread.sleep(5000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

						System.out.println(Thread.currentThread().getName()
								+ " take something...");

						try {
							int value = queue.take();
							System.out.println(Thread.currentThread().getName()
									+ " take " + value + " out...");

						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}

			});
		}

		exec.shutdown();

	}
}
