package com.threads;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

public class Test7 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		final Semaphore se = new Semaphore(10);

		final List<Integer> list = new ArrayList<Integer>();

		for (int i = 0; i < 100; i++) {
			list.add(i);
		}

		ExecutorService exec = Executors.newFixedThreadPool(50);

		for (int i = 0; i < 50; i++) {

			exec.execute(new Runnable() {

				// Éú²úÕß
				public void run() {
					while (true) {

						// TODO Auto-generated method stub
						try {

							se.acquire();

							Thread.sleep(1000);

							System.out.println(list.get(new Random()
									.nextInt(99)));
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} finally {
							se.release();
						}
					}
				}
			});

		}

		exec.shutdown();
	}
}
