性能：程序的吞吐量或者处理能力

吞吐量：对网络、设备、端口、虚电路或其他设施，单位时间内成功地传送数据的数量

可伸缩性：当增加计算资源（cpu、内存、io、存储容量等），程序的吞吐量或者处理能力能相应的增加

Amdahl定律：在增加计算资源的情况下，程序在理论上能够实现最高的加速比，这个值取决于程序中可并行组件与串行组件所占的比重。

上下文切换：context switch 如果可运行的线程数大于cpu的数量，那么操作系统最终会将某个正在运行的线程调度出去，从而使其他线程能够使用cpu。

查看上下文切换：vmstat cs上下文切换数，sy为系统内度调度量

减少锁的竞争：
1、减少锁的持有时间
	1、缩小锁的范围
		
	2、减少锁的力度，
	
2、减低锁的请求频率
	锁分解和锁分段：ConcurrentHashMap
	
3、使用带有协调机制的独占锁
	1、并发容器
	2、读-写锁 ReadWriteLock
	3、原子变量，不可变对象
	
ReadWriteLock:
 对象的方法中一旦加入synchronized修饰，则任何时刻只能有一个线程访问synchronized修饰的方法。假设有个数据对象拥有写方法与读方法，多线程环境中要想保证数据的安全，需对该对象的读写方法都要加入 synchronized同步块。这样任何线程在写入时，其它线程无法读取与改变数据；如果有线程在读取时，其他线程也无法读取或写入。这种方式在写入操作远大于读操作时，问题不大，而当读取远远大于写入时，会造成性能瓶颈，因为此种情况下读取操作是可以同时进行的，而加锁操作限制了数据的并发读取。  

 ReadWriteLock解决了这个问题，当写操作时，其他线程无法读取或写入数据，而当读操作时，其它线程无法写入数据，但却可以读取数据 。	