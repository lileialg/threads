对象的组合：
1，设计线程安全的类
	1，找出构成对象状态的所有变量
	2，找出约束状态变量的不变性条件
	3，建立对象状态的并发访问管理策略

2，实例封闭
	1，单线程访问（线程封闭）
	2，建立同步访问机制
	public class PersonSet{
		private final Set<Person> mySet = new HashSet<Person>();

		public synchronized void addPerson(Person person){
			mySet.add(p);
		}

		public synchronized boolean contains(Person p){
			return mySet.contains(p);
		}

	}

	java监视器模式：
	通过私有的某个对象把对象的所有可变状态封装起来
	public class PrivateLock{
		private final Object myLock = new Object();

		private Object obj1;

		private Object obj2;

		....

		void someMethod(){
			synchronized(myObject){
				//访问或修改状态

			}

		}
	}

3，线程安全性委托
	CopyOnWriteArrayList,CopyOnWriteArraySet:
	　CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，
	 不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，
		添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读
		 * ，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，
		 读和写不同的容器。



4，对现有线程安全类添加功能：
	1，继承安全类
	2，客户端加锁：Collections.synchronizedList,Collections.synchronizedSet,Collections.synchronizedMap

	3，组合：putIfAbsent(不存在就添加)：
		private final List<T> list;

		public synchronized boolean putIfAbsent(T t){
			boolean flag = true;

				if (!list.containts(t)){
					flag = false;
					list.add(t);
				}

			return flag;

		}

