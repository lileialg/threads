"共享"：意味着变量可以由多个线程同时访问
“可变”：意味着变量的值在其生命周期内可以发生变化
一个对象是否需要线程安全，取决于它是否被多个线程访问

同步机制：
1、synchronized
2、显示锁ReentrantLock
3、原子变量： java.util.concurrent.Atomic
4、volatile

如果在多线程中共享数据，但没有使用同步，则需要修复下列任一条件即可：
1、不在线程间共享
2、状态变量不可变
3、使用同步


线程安全性定义：
当多个线程访问某个状态数据时，不管运行时环境采用何种调度方式或者这些线程如何交替执行，并且在主调代码中
不需要任何额外的同步或协同，这个状态数据都能表现出正确的行为，那么就是线程安全的。


1、无状态的类是线程安全的：既不包含任何域，也不包含任何对其他类中域的引用，计算过程中的临时状态仅存在与线程
栈上的局部变量中，并且只能有正在执行的线程访问。-------如servlet


竞态表现：
1、读取-修改-写入 ---- count++
2、先检查后在执行


重入：
某个线程请求一个其他线程持有的锁时，会发生阻塞，如果某个线程视图获取一个已经由它自己持有的锁，那么这个请求就会成功。
重入 提升了加锁行为的封装性。

当执行时间较长的计算或者可能无法快速的完成的操作（IO，网络），一定不要加锁